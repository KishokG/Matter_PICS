import os
import re
import gspread
from lxml import etree as ET
from collections import defaultdict

# === MANUAL INPUT ===
VERSION = "V_39_1_4_1_finalization"
GENERATED_DATE = "2025-03-13 15:30:41"
REF_DOCUMENT = "version 1.4.1-Release a855cb78,\nDraft\n2025-03-12 15:00:19 +0530"
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/11VFIumfm5xpB8YhKtGi8esbJ8KlHrRJ-WbQj4I6deyA/edit#gid=0"
XML_OUTPUT_DIR = "./xml_output"

# === GOOGLE SHEET SETUP ===
gc = gspread.service_account(filename='credentials.json')
sh = gc.open_by_url(GOOGLE_SHEET_URL)

# === SHEET TABS TO PROCESS ===
sheet_tabs = [
    "Server/Client PICS",
    "Features",
    "Attributes",
    "Manual Controllable",
    "Commands Received",
    "Commands Generated",
    "Events",
    "PIXIT Definition"
]

# === HELPER: ORGANIZE DATA BY CLUSTER ===
cluster_data = defaultdict(lambda: defaultdict(list))

for tab in sheet_tabs:
    worksheet = sh.worksheet(tab)
    rows = worksheet.get_all_records()
    for row in rows:
        cluster = row.get("Cluster Name", "").strip()
        if not cluster:
            continue

        item = {
            "itemNumber": row.get("Variable", ""),
            "feature": row.get("Description", ""),
            "reference": row.get("Reference", ""),
            "status": row.get("Conformance", ""),
            "support": "false"
        }
        cluster_data[cluster][tab].append(item)

# === XML GENERATION FUNCTION ===
def create_pics_xml(cluster_name, data):
    os.makedirs(XML_OUTPUT_DIR, exist_ok=True)

    # Root XML structure
    root = ET.Element("clusterPICS", attrib={
    "{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation": "Generic-PICS-XML-Schema.xsd"
    })

    # XML comment
#    comment = f"""\
#Autogenerated xml file - Version No:{VERSION}
#Generated date:{GENERATED_DATE}
#Cluster Name -{cluster_name}
#XML PICS -Ref Document:
#{REF_DOCUMENT}"""
#    root.append(ET.Comment(comment))

    # General info
    root.append(ET.Comment("General cluster information"))
    ET.SubElement(root, "name").text = f"{cluster_name}"
    ET.SubElement(root, "clusterId").text = " "
    ET.SubElement(root, "picsRoot").text = " "

    # Server/Client PICS
    if "Server/Client PICS" in data:
        root.append(ET.Comment("Cluster role information"))
        usage = ET.SubElement(root, "usage")
        for item in data["Server/Client PICS"]:
            pics_item = ET.SubElement(usage, "picsItem")
            for tag in ["itemNumber", "feature", "reference", "status", "support"]:
                ET.SubElement(pics_item, tag).text = item[tag]

    # PIXIT section
    root.append(ET.Comment("PIXIT"))
    if "PIXIT Definition" in data and data["PIXIT Definition"]:
        pixit = ET.SubElement(root, "pixit")
        for item in data["PIXIT Definition"]:
            pixit_item = ET.SubElement(pixit, "pixitItem")
            for tag in ["itemNumber", "feature", "reference"]:
                ET.SubElement(pixit_item, tag).text = item[tag]
            cond_value = '.'.join(item["itemNumber"].split('.')[:2]) if '.' in item["itemNumber"] else item["itemNumber"]
            ET.SubElement(pixit_item, "status", cond=cond_value).text = item["status"]
            ET.SubElement(pixit_item, "support").text = "0x00"  # override for PIXIT section
    else:
        ET.SubElement(root, "pixit")

    # Server side
    root.append(ET.Comment("Server side PICS"))
    server = ET.SubElement(root, "clusterSide", type="Server")

    section_map = {
        "Attributes": ("attributes", "Attributes PICS write"),
        "Events": ("events", "Events PICS write"),
        "Commands Generated": ("commandsGenerated", "Commands generated PICS write"),
        "Commands Received": ("commandsReceived", "Commands received PICS write"),
        "Features": ("features", "Features PICS write"),
        "Manual Controllable": ("manually", "Manual controllable PICS write")
    }

    for tab_name, (xml_tag, comment) in section_map.items():
        server.append(ET.Comment(comment))
        section = ET.SubElement(server, xml_tag)
        if tab_name in data and data[tab_name]:
            for item in data[tab_name]:
                pics_item = ET.SubElement(section, "picsItem")
                for t in ["itemNumber", "feature", "reference"]:
                    ET.SubElement(pics_item, t).text = item[t]
                cond_value = '.'.join(item["itemNumber"].split('.')[:2]) if '.' in item["itemNumber"] else item["itemNumber"]
                ET.SubElement(pics_item, "status", cond=cond_value).text = item["status"]
                ET.SubElement(pics_item, "support").text = item["support"]

    # Client side
    root.append(ET.Comment("Client side PICS"))
    client = ET.SubElement(root, "clusterSide", type="Client")
    for tag, comment in [
        ("attributes", "Attributes PICS write"),
        ("events", "Events PICS write"),
        ("commandsGenerated", "Commands generated PICS write"),
        ("commandsReceived", "Commands received PICS write"),
        ("features", "Features PICS write"),
        ("manually", "Manual controllable PICS write")
    ]:
        client.append(ET.Comment(comment))
        ET.SubElement(client, tag)

    # Manual prolog + comment
    header = f"""<?xml version='1.0' encoding='utf-8'?>
<!--
Autogenerated xml file - Version No:{VERSION}
Generated date:{GENERATED_DATE}
Cluster Name -{cluster_name}
XML PICS -Ref Document:
{REF_DOCUMENT}
-->
"""

    # Write to file
    # Use cluster name as-is (with spaces), only remove unsafe characters
    safe_name = re.sub(r'[^\w\-\. ]', '_', cluster_name)  # preserves spaces
    filename = os.path.join(XML_OUTPUT_DIR, f"{safe_name}.xml")
    print(f"✅ Saving to: {filename}")

    with open(filename, "wb") as f:
        f.write(header.encode("utf-8"))
        #f.write(ET.tostring(root, pretty_print=True, encoding="utf-8"))
        xml_bytes = ET.tostring(root, pretty_print=True, encoding="utf-8")
        xml_bytes = xml_bytes.replace(b'/>', b' />')  # <tag/> → <tag />
        lines = xml_bytes.decode("utf-8").splitlines()
        tabbed_lines = []
        for line in lines:
            leading_spaces = len(line) - len(line.lstrip(' '))
            tabs = '\t' * (leading_spaces // 2)  # adjust divisor as needed for your spacing
            tabbed_lines.append(tabs + line.lstrip())
        final_xml = '\n'.join(tabbed_lines).encode("utf-8")
        f.write(final_xml)

# === RUN FOR EACH CLUSTER ===
os.makedirs(XML_OUTPUT_DIR, exist_ok=True)
for cluster_name, data in cluster_data.items():
    create_pics_xml(cluster_name, data)

print("✅ All XML files generated in:", XML_OUTPUT_DIR)
